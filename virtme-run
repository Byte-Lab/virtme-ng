#!/usr/bin/python3
# -*- mode: python -*-
# virtme-run: The main command-line virtme frontend
# Copyright Â© 2014 Andy Lutomirski
# Licensed under the GPLv2, which is available in the virtme distribution
# as a file called LICENSE with SHA-256 hash:
# 8177f97513213526df2cf6184d8ff986c675afb514d4e68a404010521b880643

import argparse
import virtmods
import modfinder
import tempfile
import shutil
import os
import fcntl
import sys
import shlex
import mkinitramfs

uname = os.uname()

def make_parser():
    parser = argparse.ArgumentParser(
        description='Virtualize your system (or another) under a kernel image',
    )

    g = parser.add_argument_group(title='Selection of kernel and modules').add_mutually_exclusive_group()
    g.add_argument('--installed-kernel', action='store', nargs='?',
                   const=uname.release, default=None, metavar='VERSION',
                   help='Use an installed kernel and its associated modules.  If no version is specified, the running kernel will be used.')

    g.add_argument('--kimg', action='store',
                   help='Use specified kernel image with no modules')

#    Disabled until kmod gets fixed.
#    g.add_argument('--kernel-build-dir', action='store', metavar='KDIR',
#                   help='Use a compiled kernel source directory')

    g = parser.add_argument_group(title='Kernel options')
    g.add_argument('-a', '--kopt', action='append', default=[],
                   help='Add a kernel option.  You can specify this more than once.')

    g = parser.add_argument_group(title='Guest features')
    g.add_argument('--console', action='store_true',
                   help='Run headless -- use ctrl-A, x to exit')
    g.add_argument('--net', action='store_true',
                   help='Enable basic network access')
    g.add_argument('--script', action='store',
                   help="Run a script in the guest.  The script's stdin will be attached to virtme-run's stdin and the script's stdout and stderr will both be attached to virtme-run's stdout.  Kernel logs will go to stderr.  For now, arguments are not supported.  This behaves oddly if stdin is a terminal; try using 'cat |virtme-run' if you have trouble with script mode.")

    g = parser.add_argument_group(title='Virtualizer settings')
    g.add_argument('-q', '--qemu-opt', action='append', default=[],
                   help="Add a single QEMU argument.  Use this when --qemu-opts's greedy behavior is problematic.'")
    g.add_argument('--qemu-opts', action='store', nargs=argparse.REMAINDER,
                   metavar='OPTS...', help='Additional arguments for QEMU.  This will consume all remaining arguments, so it must be specified last.  Avoid using -append; use --kopt instead.')

    return parser

_ARGPARSER = make_parser()

def arg_fail(message):
    print(message)
    _ARGPARSER.print_usage()
    sys.exit(1)

def find_qemu(machine=None):
    if machine is None:
        machine = os.uname().machine

    qemu = shutil.which('qemu-system-%s' % machine)
    if qemu is not None:
        return qemu

    qemu = shutil.which('qemu-kvm')
    if qemu is not None:
        return qemu

    return None

def find_kernel_and_mods(args):
    if args.installed_kernel is not None:
        kver = args.installed_kernel
        modfiles = modfinder.find_modules_from_install(
            virtmods.MODALIASES, kver=kver)
        moddir = os.path.join('/lib/modules', kver)
        kimg = '/boot/vmlinuz-%s' % kver
#    Disabled until kmod gets fixed.
#    elif args.kernel_build_dir is not None:
#        kimg = os.path.join(args.kernel_build_dir, 'arch/x86/boot/bzImage')
#        modfiles = modfinder.find_modules_from_install(
#            virtmods.MODALIASES,
#            moddir=os.path.join(args.kernel_build_dir, '.tmp_moddir'))
    elif args.kimg is not None:
        kimg = args.kimg
        modfiles = []
        moddir = None
    else:
        arg_fail('You must specify a kernel to use.')

    return kimg,modfiles,moddir

def main():
    args = _ARGPARSER.parse_args()

    qemu = find_qemu()

    config = mkinitramfs.Config()

    kimg,modfiles,moddir = find_kernel_and_mods(args)
    config.modfiles = modfiles

    qemuargs = [qemu]
    kernelargs = []

    # Set up virtfs
    qemuargs.extend(['-virtfs', 'local,id=rootfs,path=/,security_model=passthrough,mount_tag=virtme.root,readonly'])

    # Map modules
    if moddir is not None:
        qemuargs.extend(['-virtfs', 'local,path=%s,security_model=passthrough,mount_tag=virtme.moddir,readonly' % moddir])

    # Turn on KVM if available
    qemuargs.extend(['-machine', 'accel=kvm:tcg'])

    # Ask QEMU to load the kernel image directly
    qemuargs.extend(['-kernel', kimg])

    # Set up / override baseline devices
    qemuargs.extend(['-cpu', 'host'])  # We can't migrate regardless.
    qemuargs.extend(['-balloon', 'virtio'])
    qemuargs.extend(['-device', 'virtio-rng-pci'])
    qemuargs.extend(['-parallel', 'none'])
    qemuargs.extend(['-net', 'none'])

    if args.console:
        # It would be nice to use virtconsole, but it's terminally broken
        # in current kernels.  Nonetheless, I'm configuring the console
        # manually to make it easier to tweak in the future.
        qemuargs.extend(['-echr', '1'])
        qemuargs.extend(['-serial', 'none'])
        qemuargs.extend(['-chardev', 'stdio,id=console,signal=off,mux=on'])
        qemuargs.extend(['-device', 'isa-serial,chardev=console'])
        qemuargs.extend(['-mon', 'chardev=console'])
        kernelargs.extend(['console=ttyS0', 'earlyprintk=serial,ttyS0,115200'])
        qemuargs.extend(['-vga', 'none'])
        qemuargs.extend(['-display', 'none'])

    if args.script:
        if args.console:
            arg_fail('--script and --console are mutually exclusive')

        # Turn off default I/O
        qemuargs.extend(['-vga', 'none'])
        qemuargs.extend(['-display', 'none'])

        # Send kernel logs to stderr
        qemuargs.extend(['-serial', 'none'])
        qemuargs.extend(['-chardev', 'file,id=console,path=/proc/self/fd/2'])
        qemuargs.extend(['-device', 'isa-serial,chardev=console'])
        kernelargs.extend(['console=ttyS0', 'earlyprintk=serial,ttyS0,115200'])

        # Set up a virtserialport for script I/O
        qemuargs.extend(['-chardev', 'stdio,id=stdio,signal=on,mux=off'])
        qemuargs.extend(['-device', 'virtio-serial-pci'])
        qemuargs.extend(['-device', 'virtserialport,name=virtme.scriptio,chardev=stdio'])

        # Ask virtme-init to run the script
        config.virtme_data[b'script'] = """#!/bin/sh

        exec {scriptpath}
        """.format(scriptpath=shlex.quote(args.script)).encode('ascii')

        # Nasty issue: QEMU will set O_NONBLOCK on fds 0, 1, and 2.
        # This isn't inherently bad, but it can cause a problem if
        # another process is reading from 1 or writing to 0, which is
        # exactly what happens if you're using a terminal and you
        # redirect some, but not all, of the tty fds.  Work around it
        # by giving QEMU private copies of the open object if either
        # of them is a terminal.
        for oldfd,mode in ((0,os.O_RDONLY), (1,os.O_WRONLY), (2,os.O_WRONLY)):
            if os.isatty(oldfd):
                try:
                    newfd = os.open('/proc/self/fd/%d' % oldfd, mode)
                except OSError:
                    pass
                else:
                    os.dup2(newfd, oldfd)
                    os.close(newfd)

    if args.net:
        qemuargs.extend(['-net', 'nic,model=virtio'])
        qemuargs.extend(['-net', 'user'])
        kernelargs.extend(['virtme.dhcp'])

    # Insert kernel options
    if kernelargs:
        qemuargs.extend(['-append', ' '.join(kernelargs + args.kopt)])

    # Set up the initramfs (warning: hack ahead)
    tmpfd,tmpname = tempfile.mkstemp('irfs')
    os.unlink(tmpname)
    tmpfile = os.fdopen(tmpfd, 'r+b')
    mkinitramfs.mkinitramfs(tmpfile, config)
    tmpfile.flush()
    fcntl.fcntl(tmpfd, fcntl.F_SETFD, 0)
    qemuargs.extend(['-initrd', '/proc/self/fd/%d' % tmpfile.fileno()])

    # Handle --qemu-opt(s)
    qemuargs.extend(args.qemu_opt)
    if args.qemu_opts is not None:
        qemuargs.extend(args.qemu_opts)

    # Go!
    os.execv(qemu, qemuargs)

if __name__ == '__main__':
    exit(main())
